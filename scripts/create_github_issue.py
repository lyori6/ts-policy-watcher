# scripts/create_github_issue.py

import os
import json
import httpx

# --- Configuration ---
FAILURE_LOG_FILE = "failures.log"
# These are automatically provided by the GitHub Actions environment
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")
REPO_NAME = os.environ.get("GITHUB_REPOSITORY") # e.g., "your-username/ts-policy-watcher"
GITHUB_API_URL = f"https://api.github.com/repos/{REPO_NAME}"

def check_issue_exists(title: str, client: httpx.Client) -> bool:
    """Checks if an open issue with the exact title already exists."""
    params = {"state": "open", "q": f'"{title}" in:title repo:{REPO_NAME}'}
    # Note: A more precise query might be needed for very high-traffic repos,
    # but this is perfect for our needs.
    response = client.get("https://api.github.com/search/issues", params=params)
    response.raise_for_status()
    data = response.json()
    return data.get("total_count", 0) > 0

def create_issue(title: str, body: str, client: httpx.Client):
    """Creates a new issue in the repository."""
    issue_data = {"title": title, "body": body, "labels": ["bug", "auto-generated"]}
    response = client.post(f"{GITHUB_API_URL}/issues", json=issue_data)
    if response.status_code == 201:
        print(f"Successfully created issue: '{title}'")
    else:
        print(f"Failed to create issue. Status: {response.status_code}, Response: {response.text}")

def main():
    if not os.path.exists(FAILURE_LOG_FILE):
        print("No failures log found. Exiting gracefully.")
        return

    if not GITHUB_TOKEN or not REPO_NAME:
        print("Error: GITHUB_TOKEN or GITHUB_REPOSITORY env vars not set. Cannot create issues.")
        return

    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json",
    }
    
    with httpx.Client(headers=headers) as client:
        with open(FAILURE_LOG_FILE, "r") as f:
            failures = [json.loads(line) for line in f]

        for failure in failures:
            issue_title = f"[Auto-Alert] Fetch Failure: {failure['platform']}"
            issue_body = (
                f"**Automated Alert: A tracked policy page is failing to fetch.**\n\n"
                f"- **URL:** `{failure['url']}`\n"
                f"- **Platform Slug:** `{failure['platform']}`\n"
                f"- **Reason:**\n```\n{failure['reason']}\n```\n\n"
                f"This issue was auto-generated by the T&S Policy Watcher. It will not be re-created as long as this issue remains open."
            )
            
            if not check_issue_exists(issue_title, client):
                create_issue(issue_title, issue_body, client)
            else:
                print(f"Issue '{issue_title}' already exists. Skipping creation.")

if __name__ == "__main__":
    main()