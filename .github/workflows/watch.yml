# .github/workflows/watch.yml

name: 'T&S Policy Watcher v1'

on:
  # This allows us to run the workflow manually from the Actions tab in GitHub.
  # Essential for testing and on-demand checks.
  workflow_dispatch:

  # This is the automated schedule. It uses a cron expression.
  # '0 */6 * * *' means "at minute 0, every 6th hour".
  # It will run at 00:00, 06:00, 12:00, 18:00 UTC.
  schedule:
    - cron: '0 */6 * * *'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  watch-and-report:
    # We will run our job on the latest version of Ubuntu provided by GitHub.
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      # Step 1: Check out the repository code
      # This downloads our repository onto the runner so we can work with it.
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      # We specify a version to ensure our script runs in a consistent environment.
      - name: 'Set up Python 3.11'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Step 3: Install dependencies and playwright
      - name: 'Install Dependencies'
        run: |
          pip install -r requirements.txt
          # The -E flag tells sudo to preserve the existing environment variables,
          # ensuring it uses the correct Python that setup-python configured.
          sudo -E $(which python) -m playwright install-deps
          python -m playwright install

      # Step 4: Run the fetcher script
      - name: 'Run Fetcher Script'
        run: python scripts/fetch.py

      # Step 5: Commit the new snapshots back to the repository
      - name: 'Commit Snapshots'
        id: commit
        run: |
          git config user.name "Policy Watch Bot"
          git config user.email "bot@github.com"
          git add snapshots/
          # If there are changes, commit them and output the SHA
          if ! git diff --staged --quiet; then
            git commit -m "CHORE: Update T&S policy snapshots"
            echo "commit_sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          else
            echo "No changes to commit."
            echo "commit_sha=" >> "$GITHUB_OUTPUT"
          fi

      # Step 6: Pull latest changes to avoid race conditions
      # This ensures our local branch is up-to-date before pushing.
      - name: 'Pull Latest Changes'
        run: git pull origin main --rebase

      # Step 7: Push the changes back to the main branch
      # This uses a dedicated action to handle pushing the commits.
      - name: 'Push Changes'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      # Step 8: Detect changes, generate summary, and set outputs
      - name: 'Detect Changes and Notify'
        id: diff
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GEMINI_API_KEY_2: ${{ secrets.GEMINI_API_KEY_2 }}
          COMMIT_SHA: ${{ steps.commit.outputs.commit_sha }}
        run: python scripts/diff_and_notify.py

      # Step 9: Commit the generated summaries and run log
      - name: 'Commit Summary Artifacts'
        run: |
          git config user.name "Policy Watch Bot"
          git config user.email "bot@github.com"
          git add summaries.json run_log.json
          # Only commit if there are changes to these files
          if ! git diff --staged --quiet; then
            git commit -m "CHORE: Update policy summaries and run log"
            echo "Successfully committed summary artifacts."
          else
            echo "No changes to summary artifacts."
          fi

      # Step 10: Pull and push all changes
      - name: 'Pull Latest Changes Before Push'
        run: git pull origin main --rebase

      - name: 'Push Summary Changes'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main